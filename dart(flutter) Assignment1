//QUSTION 1
void main() {
  List<int> a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89];

  // Print elements less than 5
  for (int element in a) {
    if (element < 5) {
      print(element);
    }
  }
}

//QUESTION 2
void main() {
  List<int> a = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89];
  List<int> b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13];

  List<int> commonElements = findCommonElements(a, b);

  print("Common Elements: $commonElements");
}

List<int> findCommonElements(List<int> list1, List<int> list2) {
  Set<int> set1 = list1.toSet();
  Set<int> set2 = list2.toSet();

  // Intersection of two sets will give the common elements
  Set<int> commonSet = set1.intersection(set2);

  // Convert the set back to a list and return
  return commonSet.toList();
}

//QUESTION 3
void main() {
  String input = "POP"; 

  if (isPalindrome(input)) {
    print("$input is a palindrome.");
  } else {
    print("$input is not a palindrome.");
  }
}

bool isPalindrome(String str) {
  // Remove any non-alphanumeric characters and convert to lowercase
  String cleanedStr = str.replaceAll(RegExp(r'[^a-zA-Z0-9]'), '').toLowerCase();

  // Check if the cleaned string is equal to its reverse
  return cleanedStr == cleanedStr.split('').reversed.join('');
}

//QUESTION 4

void main() {
  List<int> a = [5, 10, 15, 20, 25];

  List<int> output = getFirstAndLastElements(a);

  print("First and Last Elements: $output");
}

List<int> getFirstAndLastElements(List<int> list) {
  if (list.isEmpty) {
    throw ArgumentError("List cannot be empty.");
  }

  List<int> result = [list.first, list.last];
  return result;
}


//QUSTION 5
import 'dart:io';

void main() {
  print("Enter a long string containing multiple words:");
  String inputString = stdin.readLineSync();

  String reversedString = reverseWords(inputString);

  print("Reversed Order: $reversedString");
}

String reverseWords(String inputString) {
  List<String> words = inputString.split(' ');
  List<String> reversedWords = words.reversed.toList();
  String reversedString = reversedWords.join(' ');
  return reversedString;
}

//QUSTION 6
void main() {
  List<int> originalList = [1,1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 9,10,10];
  List<int> uniqueList = removeDuplicates(originalList);

  print("Original List: $originalList");
  print("List with Duplicates Removed: $uniqueList");
}

List<T> removeDuplicates<T>(List<T> list) {
  List<T> uniqueList = [];
  for (T element in list) {
    if (!uniqueList.contains(element)) {
      uniqueList.add(element);
    }
  }
  return uniqueList;
}

//QUSTION 7
import 'dart:convert';

void main() {
  String jsonData = '''
    {
      "May": 3,
      "May": 5,
      "November": 2,
      "December": 1,
      "December": 4,
      "December": 2
    }
  ''';

  // Step 1: Parse the JSON data
  Map<String, dynamic> birthdayData = jsonDecode(jsonData);

  // Step 2: Extract the months of all the birthdays
  List<String> months = birthdayData.keys.toList();

  // Step 3: Count how many birthdays in each month
  Map<String, int> birthdayCount = {};
  for (String month in months) {
    birthdayCount[month] = birthdayData[month] as int;
  }

  // Step 4: Find the month with the highest and lowest birthdays
  String monthWithMostBirthdays = birthdayCount.keys.reduce((a, b) => birthdayCount[a]! > birthdayCount[b]! ? a : b);
  String monthWithLeastBirthdays = birthdayCount.keys.reduce((a, b) => birthdayCount[a]! < birthdayCount[b]! ? a : b);

  int mostBirthdays = birthdayCount[monthWithMostBirthdays]!;
  int leastBirthdays = birthdayCount[monthWithLeastBirthdays]!;

  // Step 5: Print the results
  print("Months of Birthdays: $months");
  print("Birthday Count in Each Month: $birthdayCount");
  print("Month with the Most Birthdays: $monthWithMostBirthdays ($mostBirthdays birthdays)");
  print("Month with the Least Birthdays: $monthWithLeastBirthdays ($leastBirthdays birthdays)");
}
